stuff...

Data Object for event Store
store: {
	'event:name': [
		{
			once: true/false
			, call: function(){}
			, scope: the this for this object
		}
	]
}

local events:
When triggered locally events only fire local listeners
the only difference is what store they are placed in.
The local store or the global store.

trace:
console.logs out the emitter of the event by looking up it's emitterId
Needs to have an emitterId registry, and search function...

Calling silence function:
-----------------------------------------------------
object.silence('name:event')
	or
object.silence('name:event', function(){})
	or
object.silence('name:event', function(){}, scope)
	or
object.silence('name:event', function(){}, scope, once)
	or
object.silence('name:event', function(){}, scope, once, local)



Passing an Object into the silence function:
-----------------------------------------------------
object.silence({
	eventName: 'name:event'
	, handler: function(){alert('word')}
	, scope: this
	, once: true/false
	, local: true/false
})

TODO list
	1. trace function
	2. Private events module (local to the object)
	3. simplify and combine common functional elements to reduce this
	4. add object pass through for functions pass in an object with params instead of params
	5. consider rearranging the params for silence
	6. make sure that all the cases are handled in silence with the ability to pass in an object
	7. merge listen and listenLocal
